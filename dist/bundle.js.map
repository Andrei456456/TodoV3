{"version":3,"sources":["webpack://todov3/./src/css/base.css?44bd","webpack://todov3/./src/index.js","webpack://todov3/./src/js/AbstractStore.js","webpack://todov3/./src/js/Render.js","webpack://todov3/./src/js/Store.js","webpack://todov3/./src/js/StoreLS.js","webpack://todov3/./src/js/Task.js","webpack://todov3/./src/js/TaskManager.js","webpack://todov3/./src/js/Todo.js","webpack://todov3/./src/js/TodoApp.js","webpack://todov3/webpack/bootstrap","webpack://todov3/webpack/runtime/chunk loaded","webpack://todov3/webpack/runtime/define property getters","webpack://todov3/webpack/runtime/hasOwnProperty shorthand","webpack://todov3/webpack/runtime/make namespace object","webpack://todov3/webpack/runtime/jsonp chunk loading","webpack://todov3/webpack/startup"],"names":[],"mappings":";;;;;;;;;;;AAAA;;;;;;;;;;;;;;ACAwB;AACkB;;AAE1C,oBAAoB,mDAAO;;AAE3B,kB;;;;;;;;;;;;;;ACLO;;AAEP;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,mB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACzBO;AACP;AACA;AACA;AACA;;AAEA;AACA,WAAW;;AAEX;AACA,kCAAkC,QAAQ;;AAE1C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA,WAAW,oCAAoC;AAC/C,WAAW,4CAA4C;AACvD,WAAW,0CAA0C;AACrD,WAAW,uEAAuE;AAClF,WAAW,4EAA4E;AACvF;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,mDAAmD,GAAG;AACtD;AACA;;AAEA,sC;AACA,mDAAmD,GAAG;AACtD,qDAAqD,GAAG;AACxD;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,C;;;;;;;;;;;;;;;;AC5EmD;AAClB;;;AAG1B,oBAAoB,4DAAa;;AAExC;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iCAAiC,gDAAU;AAC3C;AACA,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B,qBAAqB;AACrB;AACA;AACA,+CAA+C,gDAAU;AACzD;AACA,iDAAiD,kDAAY;AAC7D,kE;AACA;AACA,qBAAqB;AACrB;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,qBAAqB;AACrB;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA,aAAa,E;AACb,SAAS;;AAET;AACA,C;;;;;;;;;;;;;;;;AC5HmD;AAClB;;AAE1B,sBAAsB,4DAAa;;AAE1C;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,iCAAiC,gDAAU;AAC3C;AACA,aAAa;AACb,SAAS;AACT;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gD;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B,qBAAqB;AACrB;AACA;AACA,+CAA+C,gDAAU;AACzD;AACA,iDAAiD,kDAAY;AAC7D,kE;AACA;AACA,qBAAqB;AACrB;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,qBAAqB;AACrB;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA,aAAa,E;AACb,SAAS,E;AACT,K;AACA,C;;;;;;;;;;;;;;ACzHO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,kBAAkB,0BAA0B;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,oBAAoB,0BAA0B;AAC9C,iBAAiB,kBAAkB;AACnC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;;;;;;;;;;;;;;;ACxCiC;;AAE1B;AACP;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA,yBAAyB,WAAW;AACpC,wBAAwB,kDAAY;AACpC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,oB;AACA;AACA;AACA,C;;;;;;;;;;;;;;ACvCO;AACP;AACA;AACA;AACA;AACA,aAAa,mEAAmE;AAChF,aAAa,+DAA+D;AAC5E;;AAEA;AACA,8B;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,8C;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT,yB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;;AAEA,yB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;;;;;;;;;;;;;;;;;;;;ACvGgC;AACO;AACQ;AACV;AACJ;;AAE1B;AACP;AACA;AACA,0BAA0B,gDAAO;AACjC,gCAAgC,wDAAW,c;AAC3C,2BAA2B,8CAAM;AACjC,yBAAyB,0CAAI;AAC7B;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA,uE;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,QAAQ;AACR;;AAEA,C;;;;;;UChCA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;UAEA;UACA;;;;;WCzBA;WACA;WACA;WACA;WACA,8BAA8B,wCAAwC;WACtE;WACA;WACA;WACA;WACA,gBAAgB,qBAAqB;WACrC;WACA;WACA,iBAAiB,qBAAqB;WACtC;WACA;WACA,IAAI;WACJ;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA,E;;;;;WC1BA;WACA;WACA;WACA;WACA,wCAAwC,yCAAyC;WACjF;WACA;WACA,E;;;;;WCPA,wF;;;;;WCAA;WACA;WACA;WACA,sDAAsD,kBAAkB;WACxE;WACA,+CAA+C,cAAc;WAC7D,E;;;;;WCNA;;WAEA;WACA;WACA;WACA;WACA;WACA;WACA;;WAEA;;WAEA;;WAEA;;WAEA;;WAEA;;WAEA;;WAEA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA,MAAM,oBAAoB;WAC1B;WACA;WACA;WACA;WACA;WACA;WACA;WACA;;WAEA;WACA;WACA,4G;;;;;UC/CA;UACA;UACA;UACA;UACA","file":"bundle.js","sourcesContent":["// extracted by mini-css-extract-plugin\nexport {};","import './css/base.css';\r\nimport { TodoApp } from \"./js/TodoApp.js\";\r\n\r\nconst todoApp = new TodoApp();\r\n\r\ntodoApp.execute();","export class AbstractStore {\r\n\r\n    checkStore() {\r\n        throw new Error('not implemented');\r\n    }\r\n\r\n    getBaseTasks() {\r\n        throw new Error('not implemented');\r\n    }\r\n\r\n    addTask() {\r\n        throw new Error('not implemented');\r\n    }\r\n\r\n    getLastTask() {  \r\n        throw new Error('not implemented');\r\n    }\r\n\r\n    removeTask() {\r\n        throw new Error('not implemented');\r\n    }\r\n\r\n    updateTask() {\r\n        throw new Error('not implemented');\r\n    }\r\n}\r\n\r\n","export class Render {\r\n    constructor(taskContainerRef, todoApp) {\r\n        this._taskContainerRef = taskContainerRef;\r\n        this._todoApp = todoApp;\r\n    }\r\n    \r\n    render(task) {\r\n      //  {id:'', title:'', date:'', isDone:''}\r\n        \r\n        const div = document.createElement(\"div\");\r\n        div.setAttribute('id', `${task.id}`);\r\n\r\n        const title = document.createElement(\"p\");\r\n        title.textContent = task.title;\r\n        const date = document.createElement(\"p\");\r\n        date.textContent = task.date;\r\n  \r\n        const buttonSave = document.createElement(\"button\");\r\n        if (task.isDone === true) {\r\n          div.classList.add('done-todo');\r\n          buttonSave.classList.add('td-item-buttonSave-true');\r\n        }\r\n        buttonSave.textContent = \"Done\";\r\n      \r\n        const buttonDelete = document.createElement(\"button\");\r\n      \r\n        buttonDelete.textContent = \"Delete\";\r\n  \r\n        const styleViewTasksItem = [\r\n          { name: div, arrClasses: ['td-item']},\r\n          { name: title, arrClasses: ['td-item-title']},\r\n          { name: date, arrClasses: ['td-item-date']},\r\n          { name: buttonSave, arrClasses: ['td-item-buttonSave','td-item-button']},\r\n          { name: buttonDelete, arrClasses: ['td-item-buttonDelete', 'td-item-button']},\r\n        ];\r\n        styleViewTasksItem.forEach( item => {\r\n          this._setTasksClasses(item.name, item.arrClasses);\r\n        });\r\n\r\n        div.appendChild(title);\r\n        div.appendChild(date);\r\n        div.appendChild(buttonSave);\r\n        div.appendChild(buttonDelete);\r\n  \r\n        this._taskContainerRef.appendChild(div);\r\n    }\r\n\r\n    _setTasksClasses(name, arrClasses) {\r\n        for (let item of arrClasses ) {\r\n          name.classList.add(item);\r\n        }\r\n    }\r\n  \r\n    resetInputsTitleDate() {\r\n        const inputTitleRef = document.querySelector(\".title\");\r\n        const inputDateRef = document.querySelector(\".date\");\r\n        inputTitleRef.value = \"\";\r\n        inputDateRef.value = \"\";\r\n    }\r\n    \r\n    removeTaskById(id) {\r\n        const taskRef = document.querySelector(`#${id}`);\r\n        taskRef.remove();\r\n    }\r\n\r\n    renderSingleTaskById(id, isDone) { \r\n        const taskRef = document.querySelector(`#${id}`);\r\n        const buttonRef = document.querySelector(`#${id} > .td-item-buttonSave`);\r\n        if (isDone === true) {\r\n        taskRef.classList.add('done-todo');\r\n        buttonRef.classList.add('td-item-buttonSave-true');\r\n        } else {\r\n            taskRef.classList.remove('done-todo');\r\n            buttonRef.classList.remove('td-item-buttonSave-true');\r\n        }\r\n    }\r\n}","import { AbstractStore } from \"./AbstractStore.js\";\r\nimport { Task } from \"./Task.js\";\r\n\r\n\r\nexport class Store extends AbstractStore {\r\n\r\n    constructor() {\r\n        super();\r\n        this._dbTasks = [];\r\n    }\r\n\r\n    \r\n\r\n    checkStore() {\r\n        // await super.checkStore();\r\n        return Promise.resolve(this._dbTasks.length > 0);\r\n    }\r\n\r\n    setBaseTasks(dataBase) {\r\n        return Promise.resolve( this._dbTasks = dataBase);\r\n    }\r\n\r\n    removeBaseTasks() {\r\n        return Promise.resolve(this._dbTasks = []);\r\n    }\r\n\r\n    getBaseTasks() {\r\n        // await super.getBaseTasks();\r\n        return Promise.resolve(this._dbTasks);\r\n    }\r\n\r\n    async addTask(task) {\r\n\r\n        const checkStore = await this.checkStore();\r\n        let resultBase = [];\r\n\r\n        if (checkStore) {\r\n            resultBase = await this.getBaseTasks();\r\n            await this.removeBaseTasks();\r\n            resultBase.push(task);\r\n        } else {\r\n            resultBase.push(task);\r\n        }\r\n\r\n        await this.setBaseTasks(resultBase);\r\n        console.log( await this.getBaseTasks());\r\n    }\r\n\r\n    getLastTask() {\r\n        // await super.getLastTask();\r\n        return new Promise ((resolve) => {\r\n            this.getBaseTasks()\r\n            .then ((currentBase) => {\r\n                const lastTask = Task.parse(currentBase[currentBase.length - 1]);\r\n                resolve (lastTask);\r\n            });\r\n        });\r\n    }\r\n\r\n    removeTask(id) {\r\n        // await super.removeTask();\r\n        return new Promise ((resolve) => {\r\n            resolve (\r\n                this.getBaseTasks()\r\n                .then((currentBase) => {\r\n                    return new Promise (async (resolve) => {\r\n                        await this.removeBaseTasks();\r\n                        const newBaseTasks = [];\r\n                        currentBase.forEach((task) => {\r\n                            if(task.id !== id) {\r\n                            newBaseTasks.push(task);\r\n                            }\r\n                        });\r\n                        resolve(newBaseTasks);\r\n                    })\r\n                }) \r\n                .then(async (newBaseTasks) => {\r\n                    await this.setBaseTasks(newBaseTasks);\r\n                    console.log( await this.getBaseTasks());\r\n                })\r\n            )\r\n        });\r\n    }\r\n   \r\n    updateTask(id) {\r\n        // await super.updateTask();\r\n        return new Promise ((resolve) => {\r\n            this.getBaseTasks()\r\n            .then((currentBase) => {\r\n                return new Promise (async (resolve) => {\r\n                    let newIsDone = '';\r\n                    await new Promise ((resolve) => {\r\n                        //  setTimeout(() => {\r\n                            resolve(this.removeBaseTasks());\r\n                        //  }, 5000)\r\n                    });\r\n                    currentBase.forEach((task,index) => {\r\n                        if( task.id === id) {\r\n                            const updateTask = Task.parse(task);\r\n                            updateTask.toggle();\r\n                            currentBase[index] = Task.deparse(updateTask);\r\n                            newIsDone = currentBase[index].isDone;                 \r\n                        }\r\n                    });\r\n                    resolve( [currentBase, newIsDone] );\r\n                });\r\n            })\r\n            .then(([currentBase, newIsDone]) => {\r\n                return new Promise (async (resolve) => {\r\n                    await new Promise ((resolve) => {\r\n                        // setTimeout(() => {\r\n                            resolve(this.setBaseTasks(currentBase));\r\n                        // }, 5000)\r\n                    });\r\n                    resolve(newIsDone);\r\n                });\r\n            })\r\n            .then(async (newIsDone) => {\r\n                console.log( await this.getBaseTasks());\r\n                resolve(newIsDone);\r\n            });  \r\n        });\r\n        \r\n    }\r\n}","import { AbstractStore } from \"./AbstractStore.js\";\r\nimport { Task } from \"./Task.js\";\r\n\r\nexport class StoreLS extends AbstractStore {\r\n    \r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    checkStore() {\r\n        // await super.checkStore();\r\n        return Promise.resolve(localStorage.getItem('dbTasks') !== null);\r\n    }\r\n\r\n    setBaseTasks(baseName, dataBase) {\r\n        return Promise.resolve(localStorage.setItem(baseName, JSON.stringify(dataBase)));\r\n    }\r\n\r\n    removeBaseTasks(baseName) {\r\n        return Promise.resolve(localStorage.removeItem(baseName));\r\n    }\r\n\r\n    getBaseTasks() {\r\n        \r\n        // await super.getBaseTasks();\r\n        return Promise.resolve(JSON.parse(localStorage.getItem('dbTasks')));\r\n    }\r\n\r\n    async addTask(task) {\r\n        \r\n        // await super.addTask();\r\n        const checkStore = await this.checkStore();\r\n        let resultBase = [];\r\n\r\n        if (checkStore) {\r\n            resultBase = await this.getBaseTasks();\r\n            await this.removeBaseTasks('dbTasks');\r\n            resultBase.push(task);\r\n        } else {\r\n            resultBase.push(task);\r\n        }\r\n\r\n        await this.setBaseTasks('dbTasks', resultBase);\r\n    }\r\n\r\n    getLastTask() {\r\n\r\n        // await super.getLastTask();\r\n        return new Promise ((resolve) => {\r\n            this.getBaseTasks()\r\n            .then ((currentBase) => {\r\n                const lastTask = Task.parse(currentBase[currentBase.length - 1]);\r\n                resolve (lastTask);\r\n            });\r\n        });\r\n    }\r\n\r\n    removeTask(id) {\r\n\r\n        // await super.removeTask();\r\n        return new Promise ((resolve) => {\r\n            resolve (\r\n                this.getBaseTasks()\r\n                .then((currentBase) => {\r\n                    return new Promise (async (resolve) => {\r\n                        await this.removeBaseTasks('dbTasks');\r\n                        const newBaseTasks = []; \r\n                        currentBase.forEach((task) => {\r\n                            if( task.id !== id) {\r\n                            newBaseTasks.push(task);\r\n                            }\r\n                        });\r\n                        resolve(newBaseTasks);\r\n                    })\r\n                }) \r\n                .then(async (newBaseTasks) => {\r\n                    await this.setBaseTasks('dbTasks', newBaseTasks);\r\n                })\r\n            )\r\n        });\r\n    }\r\n\r\n    updateTask(id) {\r\n\r\n        // await super.updateTask();\r\n        return new Promise ((resolve) => {\r\n            this.getBaseTasks()\r\n            .then((currentBase) => {\r\n                return new Promise (async (resolve) => {\r\n                    let newIsDone = '';\r\n                    await new Promise ((resolve) => {\r\n                        //  setTimeout(() => {\r\n                            resolve(this.removeBaseTasks('dbTasks'));\r\n                        //  }, 5000)\r\n                    });\r\n                    currentBase.forEach((task, index) => {\r\n                        if (task.id === id) {\r\n                            const updateTask = Task.parse(task);\r\n                            updateTask.toggle();\r\n                            currentBase[index] = Task.deparse(updateTask);\r\n                            newIsDone = currentBase[index].isDone;  \r\n                        }\r\n                    });\r\n                    resolve( [currentBase, newIsDone] );\r\n                });\r\n            })\r\n            .then (([currentBase, newIsDone]) => {\r\n                return new Promise (async (resolve) => {\r\n                    await new Promise ((resolve) => {\r\n                        // setTimeout(() => {\r\n                            resolve(this.setBaseTasks('dbTasks', currentBase));\r\n                        // }, 5000)\r\n                    });\r\n                    resolve(newIsDone);\r\n                });\r\n            })\r\n            .then((newIsDone) => {\r\n                resolve(newIsDone);\r\n            });   \r\n        });  \r\n    } \r\n}","export class Task {\r\n    constructor(id, title, date, isDone,) {\r\n        this._id = id;\r\n        this._title = title;\r\n        this._date = date;\r\n        this._isDone = isDone;\r\n    }\r\n    get id() {\r\n        return this._id;\r\n    }\r\n    get title() {\r\n        return this._title;\r\n    }\r\n    get date() {\r\n        return this._date;\r\n    }\r\n    get isDone() {\r\n        return this._isDone;\r\n    }\r\n    toggle() {\r\n        return this._isDone = !this._isDone;\r\n    }\r\n\r\n    static parse({ id, title, date, isDone }) {\r\n        return new Task(\r\n            id,\r\n            title,\r\n            date,\r\n            isDone\r\n        );\r\n    }\r\n\r\n    static deparse({ id, title, date, isDone }) {\r\n        return ({//JSON.stringify({ //убрал в другое место\r\n            id,\r\n            title,\r\n            date,\r\n            isDone,\r\n        });\r\n    }\r\n}\r\n","import { Task } from \"./Task.js\";\r\n\r\nexport class TaskManager {\r\n    constructor(store) {\r\n        this._store = store;\r\n    }\r\n\r\n    checkStore() {\r\n        return this._store.checkStore();\r\n    }\r\n\r\n    getStore() {\r\n        return this._store.getBaseTasks();\r\n    }\r\n\r\n    async createTask(title, date) {\r\n       \r\n        this.id = `task${Date.now()}`;\r\n        const newTask = Task.deparse({\r\n            id: this.id,\r\n            title: title,\r\n            date: date,\r\n            isDone: false\r\n        });\r\n        console.log(newTask);\r\n        await this._store.addTask(newTask);\r\n    }\r\n\r\n    getLastTask() {\r\n        return this._store.getLastTask();\r\n    }\r\n\r\n    async deleteTask(id) {\r\n        return await this._store.removeTask(id);\r\n    }\r\n\r\n    toggleTask(id) { \r\n       return this._store.updateTask(id);\r\n    }\r\n}","export class Todo {\r\n    constructor(taskManager, render) {\r\n        this._taskManager = taskManager;\r\n        this._render = render;\r\n        this._actionsBase = [ \r\n            { 'actionName': 'Delete', 'actionLink': this.deleteTask.bind(this) },\r\n            { 'actionName': 'Done', 'actionLink': this.doneTask.bind(this) } ];\r\n    }\r\n\r\n    get actionsBase() {\r\n     return this._actionsBase;   \r\n    }\r\n\r\n    showLastMessage() {\r\n        return console.log('Excellent! You can make next action.');\r\n        \r\n    }\r\n\r\n    firstUpdateTasks() {\r\n        this._taskManager.checkStore()\r\n        .then( async (existenceDataAtStore) => {\r\n            if (existenceDataAtStore) {\r\n                const firstValueOfStore = await this._taskManager.getStore();\r\n                firstValueOfStore.forEach((task) => {\r\n                    this._render.render(task);    \r\n                });\r\n            }\r\n        })\r\n        .then(() => {\r\n            this.showLastMessage();\r\n        });\r\n    }\r\n\r\n    addTask(inputTitleRef, inputDateRef) {\r\n        this._taskManager.createTask(inputTitleRef, inputDateRef)\r\n        .then (() => {\r\n            return this._taskManager.getLastTask();\r\n        })\r\n        .then((data) => {  \r\n                this._render.render( data );\r\n                this._render.resetInputsTitleDate();\r\n        })\r\n        .then(() => {\r\n            this.showLastMessage();\r\n        });\r\n    }\r\n\r\n    clickTask (tasksRef) {\r\n        const actionAfterClick = this.checkClickForAction(tasksRef);\r\n        console.log(actionAfterClick);\r\n        if (actionAfterClick.actionName !== '') {\r\n            this.actionsBase.forEach( (action) => {\r\n                if ( actionAfterClick.actionName === action.actionName) {\r\n                    this.makeAction(action.actionLink, actionAfterClick.idElement);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    checkClickForAction(tasksRef) {\r\n     this.tasksRef = tasksRef;\r\n        let target = event.target;\r\n        let actionName = '';\r\n        let idElement = '';\r\n\r\n        while (target !== this.tasksRef) {\r\n            if (target.tagName === 'BUTTON') {\r\n                this._actionsBase.forEach((element) => {\r\n                    if (target.textContent === element.actionName) {\r\n                        actionName = element.actionName;\r\n                        idElement = target.parentNode.id;\r\n                    }\r\n                });\r\n            }\r\n        target = target.parentNode;\r\n        }\r\n        return { 'actionName': actionName,\r\n                'idElement': idElement };\r\n    }\r\n\r\n    makeAction(action, arg) {\r\n        action(arg);\r\n    }\r\n\r\n    deleteTask(idElement) {\r\n        this._taskManager.deleteTask(idElement)\r\n        .then(() => {\r\n            this._render.removeTaskById(idElement);\r\n        })\r\n        .then(() => {\r\n            this.showLastMessage();\r\n        });\r\n    }\r\n\r\n    doneTask(idElement) {   \r\n        this._taskManager.toggleTask(idElement)\r\n        .then((isDone) => {\r\n        this._render.renderSingleTaskById(idElement, isDone);\r\n        })\r\n        .then(() => {\r\n            this.showLastMessage();\r\n        });\r\n    }\r\n}\r\n","import { Store } from \"./Store\";\r\nimport { StoreLS } from \"./StoreLS.js\";\r\nimport { TaskManager } from \"./TaskManager.js\";\r\nimport { Render } from \"./Render.js\";\r\nimport { Todo } from \"./Todo.js\";\r\n\r\nexport class TodoApp {\r\n    constructor() {\r\n        // const store = new Store();\r\n        const store = new StoreLS();\r\n        const taskManager = new TaskManager(store, this); \r\n        const render = new Render(document.querySelector('.tasks'), this);\r\n        this._todo = new Todo(taskManager, render);\r\n    }\r\n\r\n    execute() {\r\n        this._todo.firstUpdateTasks();\r\n\r\n        const buttonCreate = document.querySelector(\".btnCreate\");\r\n      \r\n        buttonCreate.addEventListener(\"click\", () => {\r\n            const inputTitleRef = document.querySelector(\".title\").value;\r\n            const inputDateRef = document.querySelector(\".date\").value;            \r\n            this._todo.addTask(inputTitleRef, inputDateRef);\r\n        });\r\n\r\n        const tasksRef = document.querySelector(\".tasks\");\r\n        tasksRef.addEventListener(\"click\", () => {\r\n            this._todo.clickTask(tasksRef);\r\n       });\r\n    }\r\n    \r\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tresult = fn();\n\t\t}\n\t}\n\treturn result;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t\"main\": 0,\n\t\"bundle\": 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tfor(moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkIds[i]] = 0;\n\t}\n\t__webpack_require__.O();\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunktodov3\"] = self[\"webpackChunktodov3\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [\"bundle\"], () => (__webpack_require__(\"./src/index.js\")))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"sourceRoot":""}